import sys
from pathlib import Path

from invoke import task
from rellu import (initialize_labels, get_version, git_commit, set_version,
                   ReleaseNotesGenerator)
from robot.libdoc import libdoc


assert Path.cwd() == Path(__file__).parent


REPOSITORY = 'robotframework/SeleniumLibrary'
VERSION_PATH = Path('src/SeleniumLibrary/__init__.py')
RELEASE_NOTES_PATH = Path('docs/SeleniumLibrary-{version}.rst')
RELEASE_NOTES_TITLE = 'SeleniumLibrary {version}'
RELEASE_NOTES_INTRO = '''TODO
'''


@task
def keyword_documentation(ctx):
    """Generates the library keyword documentation

    Documentation is generated by using the Libdoc tool.
    """
    libdoc(str(Path('src/SeleniumLibrary')),
           str(Path('docs/SeleniumLibrary.html')))


@task
def version(ctx, number, push=False):
    number = set_version(number, path=VERSION_PATH)
    print(f'Version set to {number!r}.')
    if push:
        # TODO: Handle pushing to upstream. Or remove pushing altogether.
        git_commit(VERSION_PATH, f'Updated version to {number}', push=True)


@task
def print_version(ctx):
    print(get_version(VERSION_PATH))


@task
def release_notes(ctx, version=None, username=None, password=None, write=False):
    if not version:
        version = get_version(VERSION_PATH)
    file = RELEASE_NOTES_PATH if write else sys.stdout
    generator = ReleaseNotesGenerator(REPOSITORY, RELEASE_NOTES_TITLE,
                                      RELEASE_NOTES_INTRO)
    generator.generate(version, username, password, file)


@task
def init_labels(ctx, username=None, password=None):
    initialize_labels(REPOSITORY, username, password)

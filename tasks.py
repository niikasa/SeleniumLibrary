import sys
from pathlib import Path

from invoke import task
from rellu import initialize_labels, ReleaseNotesGenerator, Version
from rellu.tasks import clean
from robot.libdoc import libdoc


assert Path.cwd() == Path(__file__).parent


REPOSITORY = 'robotframework/SeleniumLibrary'
VERSION_PATH = Path('src/SeleniumLibrary/__init__.py')
RELEASE_NOTES_PATH = Path('docs/SeleniumLibrary-{version}.rst')
RELEASE_NOTES_TITLE = 'SeleniumLibrary {version}'
RELEASE_NOTES_INTRO = '''
SeleniumLibrary_ is a web testing library for `Robot Framework`_ that utilizes
the Selenium_ tool internally. SeleniumLibrary {version} is a new release with
**UPDATE** enhancements and bug fixes. **ADD more intro stuff...**

**REMOVE this section with final releases or otherwise if release notes contain
all issues.**
All issues targeted for SeleniumLibrary {version.milestone} can be found
from the `issue tracker`_.

**REMOVE ``--pre`` from the next command with final releases.**
If you have pip_ installed, just run
``pip install --pre --upgrade robotframework-seleniumlibrary``
to install the latest release or use
``pip install robotframework-seleniumlibrary=={version}``
to install exactly this version. Alternatively you can download the source
distribution from PyPI_ and install it manually.

Rellu {version} was released on {date}.

.. _Robot Framework: http://robotframework.org
.. _SeleniumLibrary: https://github.com/robotframework/SeleniumLibrary
.. _Selenium: http://seleniumhq.org
.. _pip: http://pip-installer.org
.. _PyPI: https://pypi.python.org/pypi/robotframework-seleniumlibrary
.. _issue tracker: https://github.com/robotframework/SeleniumLibrary/issues?q=milestone%3A{version.milestone}
'''


@task
def keyword_documentation(ctx):
    """Generates the library keyword documentation

    Documentation is generated by using the Libdoc tool.
    """
    libdoc(str(Path('src/SeleniumLibrary')),
           str(Path('docs/SeleniumLibrary.html')))


@task
def set_version(ctx, version):
    version = Version(version, VERSION_PATH)
    version.write()
    print(version)


@task
def print_version(ctx):
    print(Version(path=VERSION_PATH))


@task
def release_notes(ctx, version=None, username=None, password=None, write=False):
    version = Version(version, VERSION_PATH)
    file = RELEASE_NOTES_PATH if write else sys.stdout
    generator = ReleaseNotesGenerator(REPOSITORY, RELEASE_NOTES_TITLE,
                                      RELEASE_NOTES_INTRO)
    generator.generate(version, username, password, file)


@task
def init_labels(ctx, username=None, password=None):
    initialize_labels(REPOSITORY, username, password)
